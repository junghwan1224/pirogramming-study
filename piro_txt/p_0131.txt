* filter 메소드는 결과가 없을 시 에러를 반환하는 것이 아니라 empty set을 반환한다.

* ObjectDoesNotExist : django에서 정의된 예외이다. Tag.DoesNotExist는 위 에러를 상속받은 에러라고 보면 된다. 그래서 except ObjectDoesNotExist: 라고 작성해도 되지만 직관적으로 작성하기 위해 Tag.~로 작성

* Http404 에러를 호출 => 404.html이 있다면 해당 파일을 렌더링 해준다. 그러면 해당 에러 발생 시 렌더링 되는 페이지를 꾸밀 수도 있다.

* get_object_or_404 첫 번째 인자는 모델이 들어온다. 해당 메소드는 결과 값이 있으면 get하고, 아니면 404 에러 호출해준다.  이제부터는 함부로 get 메소드를 사용하지 말자.

* app 이름은 accounts 보다는 account 추천

* LOGIN_REDIRECT_URL = '/' : empty string으로 덮어버린다. url 지정할 때 사용, 이 경우 localhost:8000으로 넘어가진다. 만일 '/article' 로 하면, localhost:8000/article로 가지겠지?

* request.GET.get('next') or settings.LOGIN_REDIRECT_URL : GET 메소드로 들어온 것 중에 next 가 없으면 LOGIN_REDIRECT_URL로 들어온다.

* gmail 인증 첫 번째 절차 : '내 계정 및 로그인-계정 액세스 권한을 가진 앱'에서 '보안 수준이 낮은 앱 허용'을 '사용'으로 둔다.

* settings에서 관련 내용 추가

* from django.core.mail import send_mail 메일 보내주는 관련 패키지

* send_mail(제목, 메세지, 보내는 사람, [받는사람(리스트 형식)], html메세지) html 메세지(optional) 안적으면 두 번째 인자 메세지로 내용 전달된다.

* python에서 dir(string)하면 string에서 이용할 수 있는 메소드 보여준다.

* import string, import random

* string.ascii_letters : a부터 Z까지 문자 나열

* string digits : '0123456789' 반환

* 위 두 개를 합쳐 랜덤으로 골라내어 암호를 만들 것이다. random.choice(choice_set) 사용 할 수도 있지만, random.choices 메소드 사용한다.

* random.choices(choice_set, k=10) : k=10은 choice_set에서 임의로 10개를 무작위로 골라 리스트 형식으로 뽑아낸다.

* ''.join(random.choices(choice_set, k=10)) 리스트 원소들을 하나로 합친 문자로 반환한다.

* get_or_create 메소드는 값을 두개를 반환한다. 두 번째 반환값은 bool 값

* create_at__gt = 오늘로부터 7일전 datetime instance 저장하면 시간을 지정할 수 있다.