* 서버 실행시켰을 때 빨간색 경고로 unupdated 어쩌고 뜨면 migrate 최신화 안돼있는 것, 그냥 migragte 해주면 된다. 자주 뜰 수 있으니 참고해두면 좋다.

* models에서 verbose_name 지정 안해주면 그냥 변수명으로 뜰거임.

* 별도로 설정해주지 않으면 appname_modelname으로 지정된다?

* 파이썬에서 함수 이름은 동사 이름으로 해주는 것이 좋다. ex) article_list -> list_article

* localhost:8000/article_list 여기서 localhost:8000 부분은 url, article_path 부분은 path, 뒤에 get 방식으로 입력한 값들 뜨는 부분은 getQuery. 이렇게 쓰는 이유는 검색을 했을 때 페이지 별로 나눠서 해주거나 할 때 사용자가 해당 페이지 클릭하면 거기로 갈 수 있게끔 하기 용이하다.

* blog_create에서 아무것도 입력 안하고 제출 누르면, None값이 아니라 empty string 값이 들어간다.

* view.py에서 print() 쓰면 cmd 화면에서 출력 내용 확인 가능

* strip() 양 끝 공백 제거

* form.as_p => as_p : p태그로 감싸라, 다른 태그로 감싸도록 하고 싶으면, as_태그이름

* form으로 하면 empty string에 대해서도 자동으로 처리해준다.

* form에서는 URLField라는 것도 있는데 url 형식으로 작성 안하면 그 형식으로 작성 안했다는 내용의 에러 메세지가 뜬다. form의 강점 중 하나이다.

* 메소드를 통해 validate 에러를 추가할 수 있다. 이를 통해 입력하는 내용을 제한할 수 있다.

* raise : 에러를 호출해낸다.

* clean_필드명(self) : validate 메소드를 호출하고 싶으면 이런 양식으로 작성하라

* A or B 연산은 A가 참이면 A 연산 결과 반환하고(뒤에껀 안본다.), 거짓이면, 뒤에 있는 연산해서 결과 값 반환, 뒤에 있는 값이 참인지 거짓인지는 중요하지 않고 무조건 반환한다. or 연산은 그런것이다.

* A and B 앞이 참이면 뒤에 있는 연산 결과 반환, 앞이 거짓이면 False 반환

* github url : 마지막에 piro_remind

* ModelForm 은 model에서 만든 양식을 그대로 가져와서 쓸 수 있다.

* views는 메인함수처럼 생각해라. 최대한 간단하게 작성할 수 있도록 !

* 추후에 태그에 부여되는 id 값이나 name 값을 잘 확인하도록. css 등을 이용할 때 필요하니까.

* ModelForm은 오버라이드 가능, 선언해주면, 선언한거를 제외하고 기존에 있던거 생성한다.