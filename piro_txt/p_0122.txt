* settings에서 DEBUG 값 False로 해주면, 에러 페이지 화면이 바뀐다. 디버그 페이지 안나옴

* django static serve 구글에 검색하고 첫 번째 링크에 들어가면 문서에 관련 세팅 내용 나와있다.

* 미디어 파일도 스태틱 파일의 일종, 스태틱은 개발자가 올려놓은 파일이라면, 미디어는 유저가 올린 파일이라고 보면 된다.

* staticURL : 스태틱 url을 어떤 url에다 세팅해놔야 할지 정한다.

* static 태그가 있어서 경로를 일일이 할 필요 없다. 경로는 상대경로로 한다. css/core.css처럼. static 태그를 쓰고자 할 때는 위에 {% load static %} 선언해준다.

* static_root는 앱마다 흩어져 있는 파일들을 한 디렉토리를 모아주기 위해 사용하는 디렉토리 이름. 디렉토리 이름만 적어준다.

* STATICFILES_DIRS는 실제 위치를 등록해놔서 참조할 수 있게 해준다.

* python manage.py collectstatic 명렁어. 이름 그대로 모아준다는 의미. 관리자 사이트에 적용된 static file들도 가져온다.

* 자바스크립트(제이쿼리)는 이벤트 중심으로 돌아간다. 자바스크립트에서 return false; 해주면 default로 된 이벤트를 하지 않는다.

* 외래키 참조 시 article 객체로 만들어 진것은, article.comment_set으로 접근 가능하다. comment는 Comment객체를 모두 소문자로 바꾼 것 의미한다. article.comment_set.all() 으로 다 긁어오는 것 가능, 이 명령어의 의미는 하나의 아티클에 대해 댓글 정보를 다 가져온다. 반대로 하면 comment.article로 접근 가능

* python manage.py shell로 인터프리터에 접근 가능. 여기서는 기존의 python과는 달리 models 임포트 및 접근 가능

* article = models.ForeignKey(
            Article,
            on_delete=models.CASCADE,
        )
여기서 Article이라는 모델이 먼저 선언되지 않았으면 'Article' 이렇게 스트링 형식으로 선언해주면 된다. 다른 곳에 있는 모델은 임포트해서 사용할 수 있다.

* on_delete=models.CASCADE 기본 값, 하나 지우면 그와 연결된 것들 다 지워버린다.

* 추가하고 makemigrations 하면 기본 값 설저 관련 메세지 뜬다. 만약 옵션이 blank=True 면은 안물어보지만, 아니면 물어본다. default='hi' 이런식으로 디폴트 값을 설정해줄 수 있다.

* commit 인스턴스는 만들지만, 데이터베이스에 저장은 하지 않는다.

* 필드명으로 접근 -> article_id 이렇게 언더바(_)로 접근할 수 있다. 이는 filter 메소드 사용할 때 활용할 수 있다. ex) Comment.objects.filter(article_id=1)

--------------------------

2018. 1. 22 특강

* git clone repository_link : 내 로컬로 복사

* touch abc.txt : abc라는 이름의 텍스트 파일 생성

* git add 파일이름 치던 도중에 tab 누르면 비슷한 파일 이름 찾아 자동완성 시켜준다.

* fatal : unable to auto-detect email address ~~ 뜰 때 git config user.email 이메일주소 명령어 입력

* git checkout -b 이름 : branch 생성

* history : 입력한 커맨드 보여줌

* history | grep git : git이라는 키워드가 들어가 있는 명령어 사용 내역만 보여줌

* git remote -v : push 전 경로 설정 됐는지 확인

* git push origin 브랜치이름 : 해당 브랜치로 작성한 내용 올린다.

* issue : 해야 할 일 이라고 생각하면 됨

* merge는 팀장이 되는 사람이 하거나 마지막으로 리뷰한 사람이 하는 것을 권장한다.

* git checkout master : 마스터로 이동

* git checkout 브랜치이름 : 해당 브랜치로 이동 -b는 만드는 것이므로, 이동만 할 때는 쓰지 않는다.

* git config core.editor vi

* git commit

* 에디터로 넘어오면 i 누르면 글 쓸 수 있고, esc 누르면 안써짐

* closes #이슈넘버 입력하고 esc 누르고 :wq 입력하면 에디터 나와진다.

* new pull request : base는 master로, compare(오른쪽)는 내 브랜치로 설정하고 진행한다.

* master branch에 절대 push하지마라 !!

* 브랜치 새로 파서 pull request 하도록!

* review 없이 merge 하지 말 것!!

* git gui 서비스도 있으니 쓰고 싶은 사람들은 한번 써봐 ex) sourcetree

* git rebase, reset, cherrypick ... 금일 다루지 않았던 명령어들. 찾아보면 많으니, 필요하면 찾아볼 것

* 같은 파일을 다루면서 conflict가 발생할 수 있다. 이와 관련된 사항은 잘 찾아봥

* 다른 팀원이 추가한 파일을 merge하면 나중에 내려받을 때, (master에는 반영이 되어 있으나 내꺼에는 반영이 안돼있을 때) 이럴 때는 git pull origin master 하면 된다.

* master를 기준으로 새로운 브랜치를 만들어서 작업하는 것을 권장한다.

* git branch 어느 브랜치에 있는지?